{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport Axios from 'axios';\nimport { useDispatch } from \"react-redux\";\nexport const postOrder = createAsyncThunk(\"orders/postOrder\", _s(async data => {\n  _s();\n\n  const dispatch = useDispatch(); //   dispatch(orderUploading());\n\n  const response = await Axios.post(\"http://localhost:8080/api/v1/uploadOrderFile\", data, {\n    headers: {\n      \"Content-type\": \"multipart/form-data;boundary=----------287032381131322\"\n    }\n  });\n  const order = await response.json(); //   dispatch(orderUploaded(order));\n\n  return order;\n}, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n}));\nconst ordersSlice = createSlice({\n  name: \"orders\",\n  initialState: {\n    loading: false,\n    order: null\n  },\n  reducers: {\n    orderUploading(state, action) {\n      state.loading = true;\n    },\n\n    orderUploaded(state, action) {\n      state.loading = false;\n      state.order = action.payload;\n    }\n\n  } //   extraReducers: {\n  //     [fetchOrders.pending]: (state, action) => {\n  //       state.loading = true;\n  //     },\n  //     [fetchOrders.fulfilled]: (state, action) => {\n  //       state.loading = false;\n  //       state.entities = [...state.entities, ...action.payload];\n  //     },\n  //     [fetchOrders.rejected]: (state, action) => {\n  //       state.loading = false;\n  //     },\n  //   },\n\n});\nexport const {\n  orderUploading,\n  orderUploaded\n} = ordersSlice.actions;\nexport default ordersSlice.reducer;","map":{"version":3,"sources":["/Users/lingbokou/Documents/sample/src/main/webapp/src/components/orders/OrdersSlice.js"],"names":["createAsyncThunk","createSlice","Axios","useDispatch","postOrder","data","dispatch","response","post","headers","order","json","ordersSlice","name","initialState","loading","reducers","orderUploading","state","action","orderUploaded","payload","actions","reducer"],"mappings":";;AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,MAAMC,SAAS,GAAGJ,gBAAgB,CAAC,kBAAD,KAAqB,MAAOK,IAAP,IAAgB;AAAA;;AAC1E,QAAMC,QAAQ,GAAGH,WAAW,EAA5B,CAD0E,CAE9E;;AACE,QAAMI,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,8CAAX,EAA2DH,IAA3D,EACvB;AACEI,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADX,GADuB,CAAvB;AAOA,QAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAApB,CAV4E,CAW9E;;AACE,SAAOD,KAAP;AACD,CAbwC;AAAA,UACpBP,WADoB;AAAA,GAAlC;AAeP,MAAMS,WAAW,GAAGX,WAAW,CAAC;AAC9BY,EAAAA,IAAI,EAAE,QADwB;AAE9BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,KADG;AAEZL,IAAAA,KAAK,EAAE;AAFK,GAFgB;AAM9BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC1BD,MAAAA,KAAK,CAACH,OAAN,GAAc,IAAd;AACH,KAHO;;AAIRK,IAAAA,aAAa,CAACF,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACH,OAAN,GAAc,KAAd;AACAG,MAAAA,KAAK,CAACR,KAAN,GAAYS,MAAM,CAACE,OAAnB;AACH;;AAPO,GANoB,CAehC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1BgC,CAAD,CAA/B;AA6BA,OAAO,MAAM;AAAEJ,EAAAA,cAAF;AAAkBG,EAAAA;AAAlB,IAAoCR,WAAW,CAACU,OAAtD;AAEP,eAAeV,WAAW,CAACW,OAA3B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport Axios from 'axios';\nimport { useDispatch } from \"react-redux\";\nexport const postOrder = createAsyncThunk(\"orders/postOrder\", async (data) => {\n    const dispatch = useDispatch();\n//   dispatch(orderUploading());\n  const response = await Axios.post(\"http://localhost:8080/api/v1/uploadOrderFile\", data,                \n  {\n    headers: {\n        \"Content-type\": \"multipart/form-data;boundary=----------287032381131322\",\n    },                    \n}\n);\n  const order = await response.json();\n//   dispatch(orderUploaded(order));\n  return order;\n});\n\nconst ordersSlice = createSlice({\n  name: \"orders\",\n  initialState: {\n    loading: false,\n    order: null,\n  },\n  reducers: {\n    orderUploading(state, action) {\n        state.loading=true;\n    },\n    orderUploaded(state, action) {\n        state.loading=false;\n        state.order=action.payload;\n    }\n  },\n//   extraReducers: {\n//     [fetchOrders.pending]: (state, action) => {\n//       state.loading = true;\n//     },\n//     [fetchOrders.fulfilled]: (state, action) => {\n//       state.loading = false;\n//       state.entities = [...state.entities, ...action.payload];\n//     },\n//     [fetchOrders.rejected]: (state, action) => {\n//       state.loading = false;\n//     },\n//   },\n});\n\nexport const { orderUploading, orderUploaded } = ordersSlice.actions;\n\nexport default ordersSlice.reducer;"]},"metadata":{},"sourceType":"module"}