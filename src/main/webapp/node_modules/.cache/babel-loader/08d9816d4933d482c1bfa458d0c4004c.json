{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport Axios from 'axios';\nexport const fetchOrders = createAsyncThunk(\"orders/fetchOrders\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/v1/orders\");\n  const orders = await response.json();\n  return orders;\n});\nconst ordersSlice = createSlice({\n  name: \"orders\",\n  initialState: {\n    entities: [],\n    loading: false\n  },\n  reducers: {\n    orderAdded(state, action) {\n      state.entities.push(action.payload);\n      Axios.post(\"http://localhost:8080/api/v1/orders\", action.payload).then(response => {}).catch(error => {\n        throw error;\n      });\n    },\n\n    orderUpdated(state, action) {\n      const {\n        sku,\n        name,\n        quantity,\n        unit_price\n      } = action.payload;\n      const existingOrder = state.entities.find(order => order.sku === sku);\n\n      if (existingOrder) {\n        existingOrder.name = name;\n        existingOrder.quantity = quantity;\n        existingOrder.unit_price = unit_price;\n        Axios.put(\"http://localhost:8080/api/v1/orders\", action.payload).then(response => {}).catch(error => {\n          throw error;\n        });\n      }\n    },\n\n    orderDeleted(state, action) {\n      const {\n        sku\n      } = action.payload;\n      const existingOrder = state.entities.find(order => order.sku === sku);\n\n      if (existingOrder) {\n        state.entities = state.entities.filter(order => order.sku !== sku);\n        Axios.delete(\"http://localhost:8080/api/v1/orders/\" + sku).then(response => {}).catch(error => {\n          throw error;\n        });\n      }\n    }\n\n  },\n  extraReducers: {\n    [fetchOrders.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchOrders.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...state.entities, ...action.payload];\n    },\n    [fetchOrders.rejected]: (state, action) => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  orderAdded,\n  orderUpdated,\n  orderDeleted\n} = ordersSlice.actions;\nexport default ordersSlice.reducer;","map":{"version":3,"sources":["/Users/lingbokou/Documents/sample/src/main/webapp/src/components/orders/OrdersSlice.js"],"names":["createAsyncThunk","createSlice","Axios","fetchOrders","response","fetch","orders","json","ordersSlice","name","initialState","entities","loading","reducers","orderAdded","state","action","push","payload","post","then","catch","error","orderUpdated","sku","quantity","unit_price","existingOrder","find","order","put","orderDeleted","filter","delete","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport Axios from 'axios';\nexport const fetchOrders = createAsyncThunk(\"orders/fetchOrders\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/v1/orders\");\n  const orders = await response.json();\n  return orders;\n});\n\nconst ordersSlice = createSlice({\n  name: \"orders\",\n  initialState: {\n    entities: [],\n    loading: false,\n  },\n  reducers: {\n    orderAdded(state, action) {\n      state.entities.push(action.payload);\n      Axios.post(\"http://localhost:8080/api/v1/orders\", action.payload)\n      .then(response => {\n      })\n      .catch(error => {\n        throw(error);\n      });\n    },\n    orderUpdated(state, action) {\n      const { sku, name, quantity, unit_price } = action.payload;\n      const existingOrder = state.entities.find((order) => order.sku === sku);\n      if (existingOrder) {\n        existingOrder.name = name;\n        existingOrder.quantity= quantity;\n        existingOrder.unit_price= unit_price;\n        Axios.put(\"http://localhost:8080/api/v1/orders\", action.payload)\n        .then(response => {\n        })\n        .catch(error => {\n          throw(error);\n        });\n      }\n    },\n    orderDeleted(state, action) {\n      const { sku } = action.payload;\n      const existingOrder = state.entities.find((order) => order.sku=== sku);\n      if (existingOrder) {\n        state.entities = state.entities.filter((order) => order.sku!== sku);\n        Axios.delete(\"http://localhost:8080/api/v1/orders/\"+sku)\n        .then(response => {\n        })\n        .catch(error => {\n          throw(error);\n        });\n      }\n    },\n  },\n  extraReducers: {\n    [fetchOrders.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchOrders.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...state.entities, ...action.payload];\n    },\n    [fetchOrders.rejected]: (state, action) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { orderAdded, orderUpdated, orderDeleted } = ordersSlice.actions;\n\nexport default ordersSlice.reducer;"]},"metadata":{},"sourceType":"module"}