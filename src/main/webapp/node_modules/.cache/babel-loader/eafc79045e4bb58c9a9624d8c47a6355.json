{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport Axios from 'axios';\nexport const fetchProducts = createAsyncThunk(\"products/fetchProducts\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/v1/products\");\n  const products = await response.json();\n  return products;\n});\nconst productsSlice = createSlice({\n  name: \"products\",\n  initialState: {\n    entities: [],\n    loading: false\n  },\n  reducers: {\n    productAdded(state, action) {\n      state.entities.push(action.payload);\n      Axios.post(\"http://localhost:8080/api/v1/products\", action.payload).then(response => {}).catch(error => {\n        throw error;\n      });\n    },\n\n    productUpdated(state, action) {\n      const {\n        sku,\n        name,\n        quantity,\n        unit_price\n      } = action.payload;\n      const existingProduct = state.entities.find(product => product.sku === sku);\n\n      if (existingProduct) {\n        existingProduct.name = name;\n        existingProduct.quantity = quantity;\n        existingProduct.unit_price = unit_price;\n        Axios.put(\"http://localhost:8080/api/v1/products\", action.payload).then(response => {}).catch(error => {\n          throw error;\n        });\n      }\n    },\n\n    productDeleted(state, action) {\n      const {\n        sku\n      } = action.payload;\n      const existingProduct = state.entities.find(product => product.sku === sku);\n\n      if (existingProduct) {\n        state.entities = state.entities.filter(product => product.sku !== sku);\n        Axios.delete(\"http://localhost:8080/api/v1/products/\" + sku).then(response => {}).catch(error => {\n          throw error;\n        });\n      }\n    }\n\n  },\n  extraReducers: {\n    [fetchProducts.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchProducts.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...state.entities, ...action.payload];\n    },\n    [fetchProducts.rejected]: (state, action) => {\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  productAdded,\n  productUpdated,\n  productDeleted\n} = productsSlice.actions;\nexport default productsSlice.reducer;","map":{"version":3,"sources":["/Users/lingbokou/Documents/sample/src/main/webapp/src/components/products/ProductsSlice.js"],"names":["createAsyncThunk","createSlice","Axios","fetchProducts","response","fetch","products","json","productsSlice","name","initialState","entities","loading","reducers","productAdded","state","action","push","payload","post","then","catch","error","productUpdated","sku","quantity","unit_price","existingProduct","find","product","put","productDeleted","filter","delete","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport Axios from 'axios';\nexport const fetchProducts = createAsyncThunk(\"products/fetchProducts\", async () => {\n  const response = await fetch(\"http://localhost:8080/api/v1/products\");\n  const products = await response.json();\n  return products;\n});\n\nconst productsSlice = createSlice({\n  name: \"products\",\n  initialState: {\n    entities: [],\n    loading: false,\n  },\n  reducers: {\n    productAdded(state, action) {\n      state.entities.push(action.payload);\n      Axios.post(\"http://localhost:8080/api/v1/products\", action.payload)\n      .then(response => {\n      })\n      .catch(error => {\n        throw(error);\n      });\n    },\n    productUpdated(state, action) {\n      const { sku, name, quantity, unit_price } = action.payload;\n      const existingProduct = state.entities.find((product) => product.sku === sku);\n      if (existingProduct) {\n        existingProduct.name = name;\n        existingProduct.quantity= quantity;\n        existingProduct.unit_price= unit_price;\n        Axios.put(\"http://localhost:8080/api/v1/products\", action.payload)\n        .then(response => {\n        })\n        .catch(error => {\n          throw(error);\n        });\n      }\n    },\n    productDeleted(state, action) {\n      const { sku } = action.payload;\n      const existingProduct = state.entities.find((product) => product.sku=== sku);\n      if (existingProduct) {\n        state.entities = state.entities.filter((product) => product.sku!== sku);\n        Axios.delete(\"http://localhost:8080/api/v1/products/\"+sku)\n        .then(response => {\n        })\n        .catch(error => {\n          throw(error);\n        });\n      }\n    },\n  },\n  extraReducers: {\n    [fetchProducts.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchProducts.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.entities = [...state.entities, ...action.payload];\n    },\n    [fetchProducts.rejected]: (state, action) => {\n      state.loading = false;\n    },\n  },\n});\n\nexport const { productAdded, productUpdated, productDeleted } = productsSlice.actions;\n\nexport default productsSlice.reducer;"]},"metadata":{},"sourceType":"module"}