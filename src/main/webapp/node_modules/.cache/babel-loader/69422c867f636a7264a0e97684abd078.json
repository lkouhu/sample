{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport Axios from 'axios';\nexport const postOrder = createAsyncThunk(\"orders/postOrder\", async (state, action) => {\n  console.log(action);\n  const response = await Axios.post(\"http://localhost:8080/api/v1/uploadOrderFile\", action.payload, {\n    headers: {\n      \"Content-type\": \"multipart/form-data;boundary=----------287032381131322\"\n    }\n  });\n  const order = await response.json();\n  return order;\n});\nconst ordersSlice = createSlice({\n  name: \"orders\",\n  initialState: {\n    loading: false,\n    order: null\n  },\n  reducers: {\n    orderAdded(state, action) {\n      Axios.post(\"http://localhost:8080/api/v1/uploadOrderFile\", action.payload, {\n        headers: {\n          \"Content-type\": \"multipart/form-data;boundary=----------287032381131322\"\n        }\n      }).then(response => {\n        return {\n          order: response,\n          loading: false\n        };\n      }).catch(error => {\n        throw error;\n      });\n    }\n\n  } //   extraReducers: {\n  //     [fetchOrders.pending]: (state, action) => {\n  //       state.loading = true;\n  //     },\n  //     [fetchOrders.fulfilled]: (state, action) => {\n  //       state.loading = false;\n  //       state.entities = [...state.entities, ...action.payload];\n  //     },\n  //     [fetchOrders.rejected]: (state, action) => {\n  //       state.loading = false;\n  //     },\n  //   },\n\n});\nexport const {\n  orderAdded\n} = ordersSlice.actions;\nexport default ordersSlice.reducer;","map":{"version":3,"sources":["/Users/lingbokou/Documents/sample/src/main/webapp/src/components/orders/OrdersSlice.js"],"names":["createAsyncThunk","createSlice","Axios","postOrder","state","action","console","log","response","post","payload","headers","order","json","ordersSlice","name","initialState","loading","reducers","orderAdded","then","catch","error","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,SAAS,GAAGH,gBAAgB,CAAC,kBAAD,EAAqB,OAAOI,KAAP,EAAcC,MAAd,KAAyB;AACnFC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACF,QAAMG,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAW,8CAAX,EAA2DJ,MAAM,CAACK,OAAlE,EACvB;AACEC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADX,GADuB,CAAvB;AAOA,QAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAApB;AACA,SAAOD,KAAP;AACD,CAXwC,CAAlC;AAaP,MAAME,WAAW,GAAGb,WAAW,CAAC;AAC9Bc,EAAAA,IAAI,EAAE,QADwB;AAE9BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,KADG;AAEZL,IAAAA,KAAK,EAAE;AAFK,GAFgB;AAM9BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACf,KAAD,EAAQC,MAAR,EAAgB;AACxBH,MAAAA,KAAK,CAACO,IAAN,CAAW,8CAAX,EAA2DJ,MAAM,CAACK,OAAlE,EACA;AACEC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AADX,OADA,EAOCS,IAPD,CAOMZ,QAAQ,IAAI;AACd,eAAO;AAACI,UAAAA,KAAK,EAAEJ,QAAR;AAAkBS,UAAAA,OAAO,EAAC;AAA1B,SAAP;AACH,OATD,EAUCI,KAVD,CAUOC,KAAK,IAAI;AACd,cAAMA,KAAN;AACD,OAZD;AAaD;;AAfO,GANoB,CAuBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAlCgC,CAAD,CAA/B;AAqCA,OAAO,MAAM;AAAEH,EAAAA;AAAF,IAAiBL,WAAW,CAACS,OAAnC;AAEP,eAAeT,WAAW,CAACU,OAA3B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport Axios from 'axios';\nexport const postOrder = createAsyncThunk(\"orders/postOrder\", async (state, action) => {\n    console.log(action);\n  const response = await Axios.post(\"http://localhost:8080/api/v1/uploadOrderFile\", action.payload,                \n  {\n    headers: {\n        \"Content-type\": \"multipart/form-data;boundary=----------287032381131322\",\n    },                    \n}\n);\n  const order = await response.json();\n  return order;\n});\n\nconst ordersSlice = createSlice({\n  name: \"orders\",\n  initialState: {\n    loading: false,\n    order: null,\n  },\n  reducers: {\n    orderAdded(state, action) {\n      Axios.post(\"http://localhost:8080/api/v1/uploadOrderFile\", action.payload,                \n      {\n        headers: {\n            \"Content-type\": \"multipart/form-data;boundary=----------287032381131322\",\n        },                    \n    }\n    )\n      .then(response => {\n          return {order: response, loading:false};\n      })\n      .catch(error => {\n        throw(error);\n      });\n    },\n  },\n//   extraReducers: {\n//     [fetchOrders.pending]: (state, action) => {\n//       state.loading = true;\n//     },\n//     [fetchOrders.fulfilled]: (state, action) => {\n//       state.loading = false;\n//       state.entities = [...state.entities, ...action.payload];\n//     },\n//     [fetchOrders.rejected]: (state, action) => {\n//       state.loading = false;\n//     },\n//   },\n});\n\nexport const { orderAdded } = ordersSlice.actions;\n\nexport default ordersSlice.reducer;"]},"metadata":{},"sourceType":"module"}